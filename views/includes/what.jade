div#what-left.pull-left.col-xs-12.col-sm-12.col-md-6

  #code-slider.liquid-slider
    div
      h2.title Difficulty Adjustment
      p
        code.
          D(genesis_block) = 2^36
          D(block) =
              if anc(block,1).timestamp &gt;= anc(block,501).timestamp + 60 * 500:
                   D(block.parent) - floor(D(block.parent) / 1000)
              else:
                  D(block.parent) + floor(D(block.parent) / 1000)

    div
      h2.title Metacoin Protocol
      p
        code.
          if tx.output[0] != MARKER:
              break
          else if balance[tx.output[1]] &lt; decode_value(tx.output[3]):
              break
          else if not tx.hasSignature(tx.output[1]):
              break
          else:
              balance[tx.output[1]] -= decode_value(tx.output[3]);
              balance[tx.output[2]] += decode_value(tx.output[3]);

    div
      h2.title Sub-currencies
      p  
        code.
          if tx.value &lt; 100 * block.basefee:
              stop
          elif contract.storage[1000]:
              from = tx.sender
              to = tx.data[0]
              value = tx.data[1]
              if to &lt;= 1000:
                  stop
              if contract.storage[from] &lt; value:
                  stop
              contract.storage[from] = contract.storage[from] - value
              contract.storage[to] = contract.storage[to] + value
          else:
              contract.storage[MYCREATOR] = 10^18
              contract.storage[1000] = 1

    div
      h2.title Data Feed
      p
        code.
          if tx.sender != FEEDOWNER:
              stop
          contract.storage[data[0]] = data[1]

    div
      h2.title Hedging  Contract
      p
        code.
          if tx.value &lt; 200 * block.basefee:
              stop
          if contract.storage[1000] == 0:
              if tx.value &lt; 1000 * 10^18:
                  stop
              contract.storage[1000] = 1
              contract.storage[1001] = 998 * block.contract_storage(D)[I]
              contract.storage[1002] = block.timestamp + 30 * 86400
              contract.storage[1003] = tx.sender
          else:
              ethervalue = contract.storage[1001] / block.contract_storage(D)[I]
              if ethervalue &gt;= 5000:
                  mktx(contract.storage[1003],5000 * 10^18,0,0)
              else if block.timestamp &gt; contract.storage[1002]:
                  mktx(contract.storage[1003],ethervalue * 10^18,0,0)
                  mktx(A,(5000 - ethervalue) * 10^18,0,0)

    div
      h2.title Name Registration
      p
        code.
          if tx.value &lt; block.basefee * 200:
              stop
          if contract.storage[tx.data[0]] or tx.data[0] &lt; 100:
              stop
          contract.storage[tx.data[0]] = tx.data[1]

    div
      h2.title Decentralized Autonomous Organizations
      p
        code.
          if tx.value &lt; tx.basefee * 200:
              stop
          if contract.storage[tx.sender] == 0:
              stop
          k = sha3(32,tx.data[1])
          if tx.data[0] == 0:
              if contract.storage[k + tx.sender] == 0:
                  contract.storage[k + tx.sender] = 1
                  contract.storage[k] += 1
          else if tx.data[0] == 1:
              if tx.value &lt;= tx.datan * block.basefee * 200 or contract.storage[k]:
                  stop
              i = 2
              while i &lt; tx.datan:
                  contract.storage[k + i] = tx.data[i]
                  i = i + 1
              contract.storage[k] = 1
              contract.storage[k+1] = tx.datan
          else if tx.data[0] == 2:
              if contract.storage[k] &gt;= contract.storage[2 ^ 255] * 2 / 3:
                  if tx.value &lt;= tx.datan * block.basefee * 200:
                      stop
                  i = 3
                  L = contract.storage[k+1]
                  loc = contract.storage[k+2]
                  while i &lt; L:
                      contract.storage[loc+i-3] = tx.data[i]
                      i = i + 1
          if contract.storage[2 ^ 255 + 1] == 0:
              contract.storage[2 ^ 255 + 1] = 1
              contract.storage[C] = 1



div#what-right.pull-right.col-xs-12.col-sm-12.col-md-6
  h2 What?
  :markdown
    Ethereum is a platform and a programming language that makes it possible for any developer to build and publish next-generation decentralized applications.

    Ethereum can be used to codify, decentralize, secure and trade just about anything: voting, domain names, financial exchanges, crowdfunding, company governance, contracts and agreements of most kind, intellectual property, and even smart property thanks to hardware integration.

    Ethereum borrows the concept of decentralized consensus that makes bitcoin so resilient, yet makes it trivial to build on its foundation. To find out more about how Ethereum works, consult [the whitepaper](https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-White-Paper).

    What will you build out of the Ether?
